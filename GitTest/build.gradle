apply plugin: 'java'

sourceCompatibility = 1.7
version = '1.0'
ext.cascadingVersion = '3.0.1'
ext.hadoopVersion = '2.6.0'
ext.hiveVersion = '1.2.0'
def mainClassName='com.bitwiseglobal.bhse.utilities.BHSExecution'
def artifactUrl="http://10.30.127.67:9091/artifactory/libs-release-local"

repositories {
				maven{
    					url artifactUrl
   			 		}
  				mavenLocal() 
  				mavenCentral() 
    			maven {
    					url 'http://conjars.org/repo/'
					}
  				maven {
    					url 'http://maven.twttr.com/'
					}
}  
configurations {
				 compile
}
 sourceSets {
		  main {
				java.srcDir 'src'
 			 } 
}
  
dependencies {
  compile(group: 'elt-bhs', name: 'elt-bhs', version: 'elt-bhs')
  compile group: 'cascading', name: 'cascading-core', version: cascadingVersion
  compile group: 'cascading', name: 'cascading-hadoop2-mr1', version: cascadingVersion //required for plunger
  compile group: 'cascading', name: 'cascading-local', version: cascadingVersion //required for plunger
  compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion //required for plunger
  compile group: 'org.apache.hadoop', name: 'hadoop-mapreduce-client-common', version: hadoopVersion
  compile group: 'cascading', name: 'cascading-hive', version: '2.0.0'
  compile (group: 'org.apache.hive', name: 'hive-exec', version: hiveVersion) 
  {exclude group: 'com.google.guava'
  exclude group: 'org.apache.curator'
  }
  compile (group: 'com.google.guava', name: 'guava', version: '14.0.1')
  compile (group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2')  
  compile (group: 'com.twitter', name: 'parquet-cascading', version: '1.6.0')
  compile (group: 'com.twitter', name: 'parquet-hadoop', version: '1.6.0')
  compile (group: 'com.twitter', name: 'parquet-column', version: '1.6.0')
  compile (group: 'org.fluttercode.datafactory', name: 'datafactory', version: '0.8')
  compile (group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3')
  testCompile(group: 'junit', name: 'junit', version: '4.11')
  testCompile(group: 'com.hotels', name: 'plunger', version: '4.11')
  testCompile (group: 'org.mockito', name: 'mockito-core', version: '1.9.5')
  testCompile (group: 'commons-io', name: 'commons-io', version: '2.4')  
}

test {
     testLogging.showStandardStreams = true
}  

/**
*return project build jar file.
*/
def jarFiles = files {file(project.libsDir.path).listFiles() }

//get property files  	
def propertyFiles 

 
/**
*Create properties folder in .gradle folder of user home and download the property files from artifect. 
* also create propertyFiles variable to update system property.
*/
task getProperties {
def propertiesFile = file("${System.getProperty('user.home')}/.gradle/properties/")
if( !propertiesFile.exists() ) {
  // Create property directory for engine properties.
  propertiesFile=mkdir(propertiesFile)
}
  ant.get(src: ''+artifactUrl+'/engine_property_files/xpath.properties', dest:propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/componentAssemblyMap.properties',dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/engine.properties', dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/input_service.properties', dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/log4j.properties', dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/ParquetDataTypeMapping.properties', dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/traversal_service.properties', dest: propertiesFile , skipexisting: 'true')
  ant.get(src: ''+artifactUrl+'/engine_property_files/runtime_service.properties', dest:propertiesFile , skipexisting: 'true') 
  propertyFiles=files { file(propertiesFile).listFiles() } 
} 

/**
*Main run job method that depends on build and property files need to run the job.
* Adding all dependency jar files in classpath and resolve args.
*/
task(run, dependsOn: ['build','classes','getProperties'], type: JavaExec){ 
		    main=mainClassName
	   		standardOutput = System.out
  			errorOutput = System.err 
			classpath += jarFiles+configurations.compile
			def argsArray = getArgsForRunJob()
			args=[''+argsArray[0]+'',''+argsArray[1]+'',''+argsArray[2]+'',''+argsArray[3]+'']
		  	propertyFiles.each {File file ->
			   systemProperty file.name, file.absolutePath
			} 
}

/**
* Get the Argument array
*return args
**/
def getArgsForRunJob(){
			def argsArray = new String[4]
			if (project.hasProperty("xmlpath")) {
			argsArray[0]="-xmlpath"
			argsArray[1]=xmlpath
			}
			if (project.hasProperty("paramFiles")) {
			argsArray[2]="-paramFiles"
			argsArray[3]=paramFiles			
			}
			return argsArray
}